using System;
using System.Diagnostics;
using System.Reflection;

class MethodTimer
{
    public static void MeasureExecutionTime(object obj)
    {
        Type type = obj.GetType();
        MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);

        foreach (MethodInfo method in methods)
        {
            Console.WriteLine($"\nExecuting Method: {method.Name}");

            Stopwatch stopwatch = Stopwatch.StartNew(); // Start timer

            object result = method.Invoke(obj, null); // Invoke method

            stopwatch.Stop(); // Stop timer

            Console.WriteLine($"Execution Time: {stopwatch.ElapsedMilliseconds} ms");

            if (method.ReturnType != typeof(void))
            {
                Console.WriteLine($"Return Value: {result}");
            }
        }
    }
}

// Target class with methods to measure
class TestMethods
{
    public void QuickMethod()
    {
        for (int i = 0; i < 1000; i++) { } // Simulating work
    }

    public void SlowMethod()
    {
        System.Threading.Thread.Sleep(500); // Simulating delay
    }

    public int ComputeSum()
    {
        int sum = 0;
        for (int i = 1; i <= 10000; i++) sum += i;
        return sum;
    }
}

class Program
{
    static void Main()
    {
        TestMethods test = new TestMethods();
        MethodTimer.MeasureExecutionTime(test);
    }
}
